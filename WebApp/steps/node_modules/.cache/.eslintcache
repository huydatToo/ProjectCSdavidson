[{"C:\\Users\\User\\Desktop\\תכנות\\davidson\\project\\DavidsonProject\\WebApp\\steps\\src\\index.js":"1","C:\\Users\\User\\Desktop\\תכנות\\davidson\\project\\DavidsonProject\\WebApp\\steps\\src\\pages\\Home.js":"2","C:\\Users\\User\\Desktop\\תכנות\\davidson\\project\\DavidsonProject\\WebApp\\steps\\src\\utils\\WalletContext.js":"3","C:\\Users\\User\\Desktop\\תכנות\\davidson\\project\\DavidsonProject\\WebApp\\steps\\src\\pages\\CreateNewProject.js":"4","C:\\Users\\User\\Desktop\\תכנות\\davidson\\project\\DavidsonProject\\WebApp\\steps\\src\\utils\\SmartContract.js":"5","C:\\Users\\User\\Desktop\\תכנות\\davidson\\project\\DavidsonProject\\WebApp\\steps\\src\\pages\\ProjectPage.js":"6","C:\\Users\\User\\Desktop\\תכנות\\davidson\\project\\DavidsonProject\\WebApp\\steps\\src\\components\\CodeEditor.js":"7","C:\\Users\\User\\Desktop\\תכנות\\davidson\\project\\DavidsonProject\\WebApp\\steps\\src\\pages\\ProjectDevelopment.js":"8","C:\\Users\\User\\Desktop\\תכנות\\davidson\\project\\DavidsonProject\\WebApp\\steps\\src\\components\\ModalDetails.js":"9","C:\\Users\\User\\Desktop\\תכנות\\davidson\\project\\DavidsonProject\\WebApp\\steps\\src\\components\\ModalChanges.js":"10","C:\\Users\\User\\Desktop\\תכנות\\davidson\\project\\DavidsonProject\\WebApp\\steps\\src\\pages\\PageLearn.js":"11","C:\\Users\\User\\Desktop\\תכנות\\davidson\\project\\DavidsonProject\\WebApp\\steps\\src\\pages\\newHome.js":"12","C:\\Users\\User\\Desktop\\תכנות\\davidson\\project\\DavidsonProject\\WebApp\\steps\\src\\pages\\NewHome.js":"13"},{"size":1141,"mtime":1709056058294,"results":"14","hashOfConfig":"15"},{"size":6313,"mtime":1709998678696,"results":"16","hashOfConfig":"15"},{"size":1750,"mtime":1709998628706,"results":"17","hashOfConfig":"15"},{"size":5262,"mtime":1706628859088,"results":"18","hashOfConfig":"15"},{"size":12079,"mtime":1710363481716,"results":"19","hashOfConfig":"15"},{"size":11387,"mtime":1710366088163,"results":"20","hashOfConfig":"15"},{"size":378,"mtime":1706628695019,"results":"21","hashOfConfig":"15"},{"size":15732,"mtime":1710365523206,"results":"22","hashOfConfig":"15"},{"size":748,"mtime":1706628729105,"results":"23","hashOfConfig":"15"},{"size":734,"mtime":1706628714401,"results":"24","hashOfConfig":"15"},{"size":2367,"mtime":1708458788192,"results":"25","hashOfConfig":"15"},{"size":148,"mtime":1708460389000,"results":"26","hashOfConfig":"15"},{"size":5077,"mtime":1709833454615,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},"1j40jez",{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"31"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"31"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},"C:\\Users\\User\\Desktop\\תכנות\\davidson\\project\\DavidsonProject\\WebApp\\steps\\src\\index.js",[],[],["74"],"C:\\Users\\User\\Desktop\\תכנות\\davidson\\project\\DavidsonProject\\WebApp\\steps\\src\\pages\\Home.js",["75"],[],"import { motion, AnimatePresence  } from 'framer-motion';\nimport downArrow from '../assets/down-arrow-svgrepo-com.svg';\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useWallet } from '../utils/WalletContext';\nimport PageLearn from './PageLearn'\nimport { Link } from 'react-scroll';\n\n\n// the home page\nfunction Home() {\n  const { contract } = useWallet();\n  const scrollRef = useRef(null)\n  const navigate = useNavigate()\n  const [isButtons, setIsButtons] = useState({new_project: 0, my: 0})\n  const [lastProjects, setLastProjects]  = useState({lastProjects: [], localProjects: []})\n  const [hoverDown, setHoverDown]  = useState(false)\n  const { isConnected, checkWalletConnection, setIsConnected, setAccount } = useWallet();\n\n  // connect smart wallet function\n  const connectWallet = async () => {\n    if (window.ethereum) {\n      try {\n        const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n        setIsConnected(true);\n        setAccount(accounts[0]);\n        setIsButtons({new_project: 0, new: 2})\n      } catch (error) {\n        console.error(\"Wallet connection error:\", error);\n      }\n    }\n  };\n\n  // the function check whether a user is connected or not\n  const checkConnectedOnButtonPress = (buttonPressed) => {\n    if (buttonPressed === \"createNewProject\" && isConnected === false) {\n      if (isButtons.new_project === 1) {\n        connectWallet()\n      } else if (isButtons.new_project === 0) {\n        setIsButtons({...isButtons, new_project: 1})\n      }\n    } else if (buttonPressed === \"createNewProject\" && isConnected === true) {\n      navigate('/createNewProject')\n    }\n  }\n\n  // TEMP\n  const getLastProjects = async () => {\n    let lastProjectsNow = await contract.getLastProjects();\n    lastProjectsNow = lastProjectsNow.filter(str => str !== \"\");\n    try {\n      const response = await fetch('http://127.0.0.1:8000/api/getLocalProjects', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        }\n      });\n\n      const data = await response.json(); \n      setLastProjects({lastProjects: lastProjectsNow, localProjects: data.projects})\n    } catch (error) {\n      console.error('Error:', error);\n      setLastProjects({lastProjects: lastProjectsNow, localProjects: []})\n    }\n  }\n\n  // the function initiate the page\n  useEffect(() => {\n    if (isConnected) {\n      setIsButtons({new_project: 0, new: 2})\n      getLastProjects()\n    }\n  }, [checkWalletConnection, isConnected]);\n\n  // returns the page's react component\n  return (\n    <div className=\"background\">\n      <div name=\"pageOne\" className='pageTwo center'>\n      <div className='moveUp'>\n        <div className='line lineGapHome'>\n          <div className='box-search '>\n            <h1 className='Title'>Search</h1>\n            <input className='search' type=\"text\"/>\n          </div>\n        </div>\n\n        <div className='line lineGapHome'>\n          <div className='box-projects'>\n            <h1 className='Title'>Popular Projects</h1>\n            {lastProjects.lastProjects.map((item, index) => (\n            <motion.div onClick={() => {navigate(`project/${item}`)}} key={index} whileHover={{scale: 1.05}} initial={{ scale: 0 }} animate={{ scale: 1 }} transition={{ type: \"spring\", duration: 0.7 }} className='project-box-load'>\n              <span className='project-box-header'>{item}</span>\n              <span>----------- | -----------</span>\n            </motion.div>\n            ))}\n          </div>\n\n          <div>\n            <div onClick={() => {checkConnectedOnButtonPress(\"createNewProject\")}}>\n            <AnimatePresence initial={false} mode='wait'>\n            {isButtons.new_project === 0 ?\n            <motion.div key={\"createNewProjectButton\"} whileTap={{scale: 0.9}} whileHover={{scale: 1.03}} initial={{ opacity: 0, scale: 0.8 }} animate={{ opacity: 1, scale: 1 }} exit={{scale: .91 }} transition={{ type: \"spring\", duration: 0.1 }} className='box-create-project border-step4'>\n              <motion.h1 initial={{ opacity: 0, scale: 0.8 }} animate={{ opacity: 1, scale: 1 }} exit={{scale: 0.9, opacity: 0.2 }} transition={{ type: \"spring\", duration: 0.1 }}  key={\"createNewProjectButtonH1\"} className='Title TitleCreatePorject'>Create <br /> New Project</motion.h1>\n            </motion.div>\n            : \n            <motion.div key={\"connectYourWalletNewProjectButton\"} whileTap={{scale: 0.9}} whileHover={{scale: 1.03}} initial={{ opacity: 0, scale: 0.8 }} animate={{ opacity: 1, scale: 1 }} exit={{scale: .91 }} transition={{ type: \"spring\", duration: 0.1 }} className='box-create-project'>\n              <motion.h1 initial={{ opacity: 0, scale: 0.8 }} animate={{ opacity: 1, scale: 1 }} exit={{scale: 0.9, opacity: 0.2 }} transition={{ type: \"spring\", duration: 0.1 }}  key={\"connectYourWalletNewProjectButtonH1\"} className='Title TitleCreatePorject'>Connect <br /> Your wallet</motion.h1>\n            </motion.div>\n            }\n            </AnimatePresence>\n            </div>\n\n            <Link to=\"pageTwo\" smooth={true} duration={500}>\n            <motion.div onMouseEnter={() => setHoverDown(true)} onMouseLeave={() => setHoverDown(false)}  whileHover={{scale: 1.03}} transition={{ type: \"spring\", duration: 0.7 }} className='box-arrow-down'>\n              <motion.img animate={{ y: hoverDown ? 40 : 0 }} transition={{ type: \"spring\", duration: 0.7 }} className='arrowDown' src={downArrow} alt=\"\" />\n            </motion.div>\n            </Link>\n          </div>\n\n          <div className='box-projects'>\n            <h1 className='Title'>Recent activity</h1>\n            {lastProjects.localProjects.map((item, index) => (\n            <motion.div onClick={() => {navigate(`project/${item}`)}} key={index} whileHover={{scale: 1.05}} initial={{ scale: 0 }} animate={{ scale: 1 }} transition={{ type: \"spring\", duration: 0.7 }} className='project-box-load'>\n              <span className='project-box-header'>{item}</span>\n              <span>----------- | -----------</span>\n            </motion.div>\n            ))}\n\n          </div>\n        </div>\n      </div>\n      </div>\n\n      <div name=\"pageTwo\" className='pageTwo background2 centerLearn'>\n        <PageLearn scroll={scrollRef}/>\n      </div>\n    </div>\n  );\n}\n\nexport default Home;\n","C:\\Users\\User\\Desktop\\תכנות\\davidson\\project\\DavidsonProject\\WebApp\\steps\\src\\utils\\WalletContext.js",[],[],"C:\\Users\\User\\Desktop\\תכנות\\davidson\\project\\DavidsonProject\\WebApp\\steps\\src\\pages\\CreateNewProject.js",["76"],[],"import React, {useState, useEffect} from 'react';\r\nimport { useWallet } from '../utils/WalletContext';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport CompleteSvg from '../assets/complete-svgrepo-com.svg';\r\nimport HomeSvg from '../assets/homeDark.svg';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\n// the page of creating a new project\r\nconst CreateNewProject = () => {\r\n    const { contract } = useWallet();\r\n    const [step, setStep] = useState(1);\r\n    const [name, setName] = useState(\"\");\r\n    const [path, setPath] = useState(\"\")\r\n    const navigate = useNavigate()\r\n\r\n\r\n    // the function upload a local project and call the create new project on the smart contract\r\n    const createProjectFunction = async () => {\r\n        try {\r\n            const response = await fetch('http://127.0.0.1:8000/api/upload', {\r\n              method: 'POST',\r\n              headers: {\r\n                'Content-Type': 'application/json',\r\n              },\r\n              body: JSON.stringify({ \"path\": path, \"name\": name }),\r\n            });\r\n        \r\n            if (!response.ok) {\r\n              throw new Error('Failed to upload file')\r\n            }\r\n        \r\n            const data = await response.json(); \r\n            const _CID = data.ipfsCID;\r\n            const transaction = await contract.createProject(_CID, name)\r\n            await transaction.wait();\r\n            navigate(`/project/${name}`)\r\n            \r\n        } catch (error) {\r\n            console.error('Error uploading file:', error);\r\n        }\r\n    }\r\n\r\n    // the functions dictate the ui state\r\n    const nextStep = () => {\r\n        if (step !== 3) {\r\n            setStep(step+1)\r\n        } else {\r\n            createProjectFunction(path)\r\n        }\r\n    }\r\n\r\n    const pastePath = async () => {\r\n        const text = await navigator.clipboard.readText();\r\n        setPath(text)\r\n        setStep(step+1)\r\n    }\r\n    \r\n    // the function returns the current form step\r\n    const getStep = () => {\r\n        if (step === 1) {\r\n        return (\r\n            <div className='center-new-project'>\r\n            <motion.div whileHover={{scale: 1.05}} initial={{ scale: 0 }} animate={{ scale: 1 }} transition={{ type: \"spring\", duration: 0.7 }} style={{cursor: \"default\"}} className='box-new-project'>\r\n                <h1>Project Name</h1>\r\n                <input onChange={(e) => setName(e.target.value)} type=\"text\" className=\"newProjectInput\" />\r\n            </motion.div>\r\n            <AnimatePresence initial={false} mode='wait'>\r\n            {name.length > 3 ? (\r\n            <motion.div key={\"divSVG\"} exit={{y: 10}} whileHover={{scale: 1.05}} initial={{y: 0 }} animate={{y: 210}} transition={{ type: \"spring\", duration: 0.7 }} onClick={() => nextStep()} className='button-new-project'>\r\n                <motion.img  transition={{ type: \"spring\", duration: 1.5 }} initial={{opacity: -1 }} animate={{opacity: 1}} key={\"svgSVG\"} className='arrowDown' src={CompleteSvg} alt=\"\" />\r\n            </motion.div>\r\n            ) : <></>}\r\n            </AnimatePresence>\r\n            </div>\r\n\r\n        )} else if (step === 2 || step === 3) {\r\n        return (\r\n            <div className='center-new-project'>\r\n            <motion.div style={{cursor: \"default\"}} whileHover={{scale: 1.05}} initial={{ scale: 0 }} animate={{ scale: 1 }} transition={{ type: \"spring\", duration: 0.7 }} className='box-new-project'>\r\n                <h1>Project Initial Folder</h1>\r\n                {step === 2 ?\r\n                <div onClick={(e) => {pastePath(e)}} style={{cursor: \"pointer\"}} className=\"newProjectInput\">\r\n                    <span className='pastePathButton'>Paste Project Path</span>\r\n                </div>\r\n                :<input value={path} onChange={(e) => setPath(e.target.value)} placeholder='Project Path' type=\"text\" className=\"newProjectInput\" />}\r\n            </motion.div>\r\n\r\n            <AnimatePresence initial={false} mode='wait'>\r\n            {path.length > 3 ? (\r\n                <motion.div key={\"divSVG\"} exit={{y: 10}} whileHover={{scale: 1.05}} initial={{y: 0 }} animate={{y: 210}} transition={{ type: \"spring\", duration: 0.7 }} onClick={() => nextStep()} className='button-new-project'>\r\n                    <motion.img transition={{ type: \"spring\", duration: 1.5 }} initial={{opacity: -1 }} animate={{opacity: 1}} key={\"svgSVG\"} className='arrowDown' src={CompleteSvg} alt=\"\" />\r\n                </motion.div>\r\n            ) : <></>}\r\n            </AnimatePresence>\r\n            </div>\r\n\r\n        )}\r\n    }\r\n\r\n\r\n    return (\r\n    <div className='background center'>\r\n        {getStep()}\r\n        <motion.div onClick={() => {navigate('/')}} transition={{ type: \"spring\", duration: 1.3 }} initial={{opacity: 0 }} animate={{opacity: 1}} className='HomeButton'>\r\n            <AnimatePresence initial={false} mode='wait'>\r\n                { step === 0 || (step === 1 && name.length < 3) || ((step === 2 || step === 3) && path.length < 3) ? (<motion.img key={\"svgSVG\"} transition={{ type: \"spring\", duration: 1.3 }} exit={{opacity: 0}} initial={{opacity: 0 }} animate={{opacity: 1}}  className='HomeButtonDark' src={HomeSvg} alt=\"\" />) : null}\r\n            </AnimatePresence>\r\n        </motion.div>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default CreateNewProject;\r\n","C:\\Users\\User\\Desktop\\תכנות\\davidson\\project\\DavidsonProject\\WebApp\\steps\\src\\utils\\SmartContract.js",[],[],"C:\\Users\\User\\Desktop\\תכנות\\davidson\\project\\DavidsonProject\\WebApp\\steps\\src\\pages\\ProjectPage.js",["77"],[],"import React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom'\r\nimport { useWallet } from '../utils/WalletContext';\r\nimport { motion } from 'framer-motion';\r\nimport HomeSvg from '../assets/home.svg';\r\nimport LeftArrowSvg from '../assets/leftArrow.svg';\r\nimport CompleteSvg from '../assets/complete-svgrepo-com.svg';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport CodeEditor from '../components/CodeEditor';\r\nimport ModalDetails from '../components/ModalDetails';\r\n\r\n// the project page\r\nconst ProjectPage = () => {\r\n    // data save on the page\r\n    const { contract } = useWallet();\r\n    const navigate = useNavigate()\r\n    const [project, setProject] = useState({changes: [], projectName: \"\", state: -1, files: [], path: ''});\r\n    const { projectName, changeProposalOrGoBack, value } = useParams();\r\n    const [fileContent, setFileContent] = useState(false)\r\n    const [isModalOpen, setModalOpen] = useState(false);\r\n    const [path, setPath] = useState({path: \"\", openPathInput: false})\r\n\r\n    // modal control functions\r\n    const openModal = () => {\r\n      setModalOpen(true);\r\n    };\r\n  \r\n    const closeModal = () => {\r\n      setModalOpen(false);\r\n      if (path.openPathInput === true) {\r\n        setPath({path: \"\", openPathInput: false})\r\n      }  \r\n    };\r\n    \r\n    // control folder ui\r\n    const ClosePathInput = () => {\r\n      if (path.openPathInput === true) {\r\n      setPath({path: \"\", openPathInput: false})\r\n      }\r\n    };\r\n\r\n    function comparePaths(path1) {\r\n      const dir1 = path1.substring(0, path1.lastIndexOf('\\\\') + 1);\r\n      const dir2 = project.path.substring(0, project.path.lastIndexOf('\\\\') + 1);\r\n    \r\n      return dir1 === dir2;\r\n    }\r\n\r\n    function getFileNameFromPath(filePath) {\r\n      const pathComponents = filePath.split('\\\\');\r\n      return pathComponents[pathComponents.length - 1];\r\n    }\r\n\r\n    function goBackOneLevel(path) {\r\n      path = path.endsWith('\\\\') ? path.slice(0, -1) : path;\r\n      const lastIndex = path.lastIndexOf('\\\\');\r\n      if (lastIndex === -1) {\r\n        return '';\r\n      }\r\n      return path.slice(0, lastIndex + 1);\r\n    }\r\n\r\n    // the files and folders react component\r\n    const getFilesHtml = () => {\r\n      let folder_files = project.files.filter(comparePaths)\r\n      if (folder_files.length > 0) {\r\n      return folder_files.map((fileName, index) => (\r\n        fileName.includes(\".\") ? (\r\n            <div onClick={() => {getFileContent(fileName)}} className='FileLine' key={index}>\r\n                <span className='FileText'>{getFileNameFromPath(fileName)}</span>\r\n                <span className='FileText'>Date</span>\r\n            </div>\r\n        ) : (\r\n            <div onClick={() => setProject({...project, path: fileName + \"\\\\\"})} className='DirLine' key={index}>\r\n                <span className='FileText'>{getFileNameFromPath(fileName)}</span>\r\n                <span className='FileText'>Date</span>\r\n            </div>\r\n        )\r\n    ))}\r\n    else {\r\n      return <div className='ListOfPatchesNo'><h1 className='ListOfPatchesNoText'>[ Empty ]</h1></div>\r\n    }}\r\n\r\n    // the functions get the project data like changes, name, etc...\r\n    const getProjectDetails = async () => {\r\n      let changes = await contract.getChangesOrProposals(projectName, true);\r\n      changes = [...changes].reverse();\r\n      let changesWithProposal\r\n      if (changeProposalOrGoBack === \"changeProposal\") {\r\n        changesWithProposal = [...changes]\r\n        changesWithProposal.push(value)\r\n        changes = changesWithProposal;\r\n      } else if (changeProposalOrGoBack === \"goBack\") {\r\n        changesWithProposal = [...changes].slice(0, value*1)\r\n        changes = changesWithProposal;\r\n      }\r\n\r\n      \r\n      let currentProjectState = {state: -1, projectName: projectName, changes: changes, files: [], path: ''}\r\n      \r\n      try {\r\n        const response = await fetch('http://127.0.0.1:8000/api/check-project', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({ \"name\": currentProjectState.projectName, \"changes\": currentProjectState.changes })\r\n        });\r\n\r\n        const data = await response.json(); \r\n\r\n        if (data[\"message\"] === 353) {\r\n          currentProjectState = {...currentProjectState, state: 353}\r\n        } else if (data[\"message\"] === 354) {\r\n          currentProjectState = {...currentProjectState, state: 354}\r\n        } else if (data[\"message\"] === 351) {\r\n          currentProjectState = {...currentProjectState, state: 351}\r\n        }\r\n\r\n        try {\r\n\r\n          const response = await fetch('http://127.0.0.1:8000/api/get_project_files', {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({ \"changes\": changes, 'name': currentProjectState.projectName }),\r\n          });\r\n\r\n          const data = await response.json(); \r\n          currentProjectState = {...currentProjectState, files: data[\"files\"]}\r\n          \r\n        } catch (error) {\r\n            console.error('Error uploading file:', error);\r\n        }\r\n    \r\n      } catch (error) {\r\n          console.error(\"Can't get project details\", error);\r\n      }\r\n      setProject(currentProjectState)\r\n\r\n  }\r\n\r\n  // the function downloads a project to the local machine\r\n  const downloadProject = async () => {\r\n    try {\r\n      await fetch('http://127.0.0.1:8000/api/download_project', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ \"changes\": project.changes, \"file_name\": project.projectName, \"path\": path }),\r\n      });\r\n      \r\n    } catch (error) {\r\n        console.error('Error uploading file:', error);\r\n    }\r\n  }\r\n\r\n  // the functions show remote file content\r\n  const getFileContent = async(file_name) => {\r\n    try {\r\n\r\n      const response = await fetch('http://127.0.0.1:8000/api/get_file', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ \"changes\": project.changes, \"file_name\": file_name }),\r\n      });\r\n\r\n      const data = await response.json(); \r\n      setFileContent(data[\"file\"])\r\n      \r\n    } catch (error) {\r\n        console.error('Error uploading file:', error);\r\n    }\r\n  }\r\n\r\n  const getState = () => {\r\n    if (project.state === 353) {\r\n      return \"Not Downloaded\"\r\n    } else if (project.state === 354) {\r\n      return \"Latest Version\"\r\n    } else if (project.state === 351) {\r\n      return \"Need Update\"\r\n    }\r\n  }\r\n\r\n  // initiate the page\r\n  useEffect(() => {\r\n      try {\r\n          getProjectDetails()\r\n      } catch (error) {\r\n          console.error('Error uploading file:', error);\r\n      }\r\n  }, [changeProposalOrGoBack]);\r\n\r\n  // the pages jsx\r\n    return (\r\n    <div className='background center'>\r\n        <ModalDetails isOpen={isModalOpen} closeModal={closeModal} closeInput={ClosePathInput}>\r\n        <div className='modalFlex'>\r\n          <div className=''>\r\n            <h1>Changes</h1>\r\n            <div className='modalFlex gap'>\r\n            {project.changes.map((changeCID, index) => (\r\n              <div onClick={() => navigate(`/project/${projectName}/goBack/${index}`)} className='FileLine centerText' key={index}>\r\n                <label className='CIDtext FileText'>{changeCID.slice(0, 42)}</label>\r\n              </div>\r\n            ))}\r\n            </div>\r\n          </div>\r\n\r\n          <div className='boxesDownload'>\r\n            <motion.div whileTap={{scale: 0.9}} whileHover={{scale: 1.03}} initial={{ opacity: 0, scale: 0.8 }} animate={{ opacity: 1, scale: 1 }} exit={{scale: .91 }} transition={{ type: \"spring\", duration: 0.6 }} onClick={() => {!path.openPathInput ? closeModal() : downloadProject()}} className='projectHeader HomeButtonDiv'>\r\n            <img className=\"HomeButton\" src={!(path.path.length > 3) ? LeftArrowSvg : CompleteSvg} alt=\"\" />\r\n            </motion.div>\r\n\r\n            {!path.openPathInput ?\r\n            <motion.div onClick={() => setPath({...path, openPathInput: !path.openPathInput})} initial={{ opacity: 0, scale: 0.8 }} animate={{ opacity: 1, scale: 1 }} exit={{scale: .91 }} transition={{ type: \"spring\", duration: 0.6 }} className='projectHeader cursorPointer'>\r\n              <h1>Download</h1>\r\n            </motion.div> :\r\n            <motion.div onClick={e => {e.stopPropagation()}} initial={{ opacity: 0, scale: 0.8 }} animate={{ opacity: 1, scale: 1 }} exit={{scale: .91 }} transition={{ type: \"spring\", duration: 0.6 }} className='projectHeader'>\r\n            <input onChange={(e) => {setPath({...path, path: e.target.value})}} type=\"text\" placeholder='Project Path' className=\"DownloadInput\" />\r\n            </motion.div>}\r\n          </div>\r\n        </div>\r\n        </ModalDetails>\r\n      \r\n        <div className='lineProjectPage'>\r\n        <div className='projectHeaderLineProposals'>\r\n        <motion.div whileTap={{y: 6}} whileHover={{y: 3}} initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{scale: .91 }} transition={{ type: \"spring\", duration: 0.6 }} onClick={() => {navigate('/')}} className='projectHeader HomeButtonDiv'>\r\n            <img className=\"HomeButton\" src={HomeSvg} alt=\"\" />\r\n        </motion.div>\r\n\r\n\r\n          <motion.div  whileTap={{y: 6}} whileHover={{y: 3}} initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{scale: .91 }} transition={{ type: \"spring\", duration: 0.6 }} className='projectHeader'>\r\n            <h1>{project.projectName}</h1>\r\n          </motion.div>\r\n\r\n          <motion.div  whileTap={{y: 6}} whileHover={{y: 3}} initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{scale: .91 }} transition={{ type: \"spring\", duration: 0.6 }} className='projectHeader toTheEnd'>\r\n            <h1>{getState()}</h1>\r\n          </motion.div>\r\n\r\n          <motion.div onClick={() => {openModal()}} whileTap={{y: 6}} whileHover={{y: 3}} initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{scale: .91 }} transition={{ type: \"spring\", duration: 0.6 }} className='projectHeader changesButton'>\r\n            <h1>Details</h1>\r\n          </motion.div>\r\n\r\n          <motion.div onClick={() => navigate(`/project/${projectName}/development`)} whileTap={{scale: 0.9}} whileHover={{scale: 1.03}} initial={{ opacity: 0, scale: 0.8 }} animate={{ opacity: 1, scale: 1 }} exit={{scale: .91 }} transition={{ type: \"spring\", duration: 0.6 }} className='projectHeader toTheEnd changesButton'>\r\n            <h1>Development</h1>\r\n          </motion.div>\r\n        </div>\r\n\r\n        <div className={project.files.length > 0 ? \"projectListProposals\" : 'projectListProposals ListOfPatchesNo'}> \r\n        {fileContent === false ? <>\r\n        {project.path.length > 1 ? \r\n        <div onClick={() => {setProject({...project, path: goBackOneLevel(project.path)})}} className='FileLine'>\r\n          <span className='FileText'>..</span>\r\n          <span className='FileText'>Go Back</span>\r\n        </div> : null}\r\n        {getFilesHtml()}\r\n        </> : <>\r\n        {typeof fileContent !== \"object\" ? CodeEditor(fileContent) : <img src={`https://ipfs.infura.io/ipfs/${fileContent[0]}/`} alt=\"\"/>}\r\n        <div onClick={() => {setFileContent(false)}}>Go back</div>\r\n        </>}\r\n        </div>\r\n        </div>\r\n\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default ProjectPage;\r\n","C:\\Users\\User\\Desktop\\תכנות\\davidson\\project\\DavidsonProject\\WebApp\\steps\\src\\components\\CodeEditor.js",[],[],"C:\\Users\\User\\Desktop\\תכנות\\davidson\\project\\DavidsonProject\\WebApp\\steps\\src\\pages\\ProjectDevelopment.js",["78"],[],"import React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { motion } from 'framer-motion';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport LeftArrowSvg from '../assets/leftArrow.svg';\r\nimport { useWallet } from '../utils/WalletContext';\r\nimport HomeSvg from '../assets/home.svg';\r\nimport ModalChanges from '../components/ModalChanges';\r\nimport { MetaMaskAvatar } from 'react-metamask-avatar';\r\n\r\n// Project development page component\r\nfunction ProjectDevelopment() {\r\n  const navigate = useNavigate();\r\n  const { projectName } = useParams();\r\n  const { contract, account, isConnected, checkWalletConnection } = useWallet();\r\n  const [ChangeProposals, setChangeProposals] = useState([]);\r\n  const [myChanges, setMyChanges] = useState([]);\r\n  const [distribution, setDistribution] = useState({\r\n    open: null,\r\n    addresses: [],\r\n    myBalance: null,\r\n  });\r\n  const [isModalOpen, setModalOpen] = useState(false);\r\n  const [clickedChangeProposal, setClickedChangeProposal] = useState(false);\r\n  const [clickedLocalChange, setClickedLocalChange] = useState(false);\r\n\r\n  // Function to get change proposals for the project\r\n  async function getChangeProposals() {\r\n    const changeProposalsTemp = await contract.getChangesOrProposals(projectName, false);\r\n    setChangeProposals(changeProposalsTemp);\r\n  }\r\n\r\n  function getTimeInSeconds() {\r\n    return Math.floor(Date.now() / 1000);\r\n  }\r\n\r\n  // Functions to open/close the modal\r\n  function openModal() {\r\n    setModalOpen(true);\r\n  }\r\n\r\n  function closeModal() {\r\n    setModalOpen(false);\r\n  }\r\n\r\n  // Function to get user's changes\r\n  async function getMyChanges() {\r\n    try {\r\n      const response = await fetch('http://127.0.0.1:8000/api/get_my_changes', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ name: projectName }),\r\n      });\r\n      const data = await response.json();\r\n      setMyChanges(data['my_changes']);\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n    }\r\n  }\r\n\r\n  // Function to vote in favor of a change\r\n  async function voteForChange() {\r\n    await contract.acceptChangeProposal(clickedChangeProposal, projectName);\r\n    navigate(`/project/${projectName}`);\r\n  }\r\n\r\n  // Function to upload local changes and create a new change proposal\r\n  async function uploadChange() {\r\n    try {\r\n      if (!clickedLocalChange) {\r\n        return -1;\r\n      }\r\n\r\n      const response = await fetch('http://127.0.0.1:8000/api/upload_changes', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ name: projectName, change_name: clickedLocalChange }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      await contract.MakeChangeProposal(data['ipfsCID'], projectName);\r\n      await getChangeProposals();\r\n      closeModal();\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n    }\r\n  }\r\n\r\n  // Function to delete a local change\r\n  async function deleteChange() {\r\n    try {\r\n      if (!clickedLocalChange) {\r\n        return -1;\r\n      }\r\n\r\n      const response = await fetch('http://127.0.0.1:8000/api/delete_change', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ name: projectName, change_name: clickedLocalChange }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      setMyChanges(data['my_changes']);\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n    }\r\n  }\r\n\r\n  // Function to save user's local changes\r\n  async function saveChanges() {\r\n    try {\r\n      await fetch('http://127.0.0.1:8000/api/save_changes', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ name: projectName, change_name: clickedLocalChange }),\r\n      });\r\n\r\n      getMyChanges();\r\n    } catch (error) {\r\n      console.error('Error saving changes:', error);\r\n    }\r\n  }\r\n\r\n  // Function to get the distribution state\r\n  async function getDistributionState() {\r\n    var lastDistributionTime = await contract.getLastDistriubtionTime(projectName);\r\n    var timeInterval = await contract.TimeLockInterval();\r\n    var myBalance = await contract.getDistributionBalanceOf(account, projectName);\r\n    var myPendingTokens = await contract.getPendingTokens(account, projectName)\r\n    \r\n    myPendingTokens = myPendingTokens.toNumber()\r\n    timeInterval = timeInterval.toNumber()\r\n    lastDistributionTime = lastDistributionTime.toNumber()\r\n    myBalance = myBalance.toNumber()\r\n    \r\n    let contributors = [];\r\n    if (lastDistributionTime > getTimeInSeconds()) {\r\n      const projectAddresses = await contract.getAddresses(projectName);\r\n      const projectAddressesFiltered = [...new Set(projectAddresses)];\r\n\r\n      for (let i = 0; i < projectAddressesFiltered.length; i++) {\r\n        contributors.push({\r\n          address: projectAddressesFiltered[i],\r\n          sendTo: 0,\r\n          changesOrProposalsCount: projectAddresses.filter((element) => element === projectAddresses[i]).length,\r\n        });\r\n      }\r\n    }\r\n\r\n    setDistribution({\r\n      ...distribution,\r\n      myBalance: myBalance,\r\n      lastDistributionTime: lastDistributionTime,\r\n      addresses: contributors,\r\n      timeInterval: timeInterval,\r\n      myPendingTokens: myPendingTokens\r\n    });\r\n  }\r\n\r\n  // Function to calculate time until the next distribution\r\n  function timeForDistribution() {\r\n    const timeNow = getTimeInSeconds();\r\n    if (distribution.lastDistributionTime > getTimeInSeconds()) {\r\n      const timeUntilNextDistribution = distribution.lastDistributionTime - timeNow;\r\n      if (timeUntilNextDistribution > 60 * 60 * 24) {\r\n        return <h2>{`${Math.floor(timeUntilNextDistribution / (60 * 60 * 24))} days until distribution ends`}</h2>\r\n      } else if (timeUntilNextDistribution < 60 * 60 * 24 && timeUntilNextDistribution > 60 * 60) {\r\n        return <h2>{`${Math.floor(timeUntilNextDistribution / (60 * 60))} hours until distribution ends`}</h2>\r\n      } else if (timeUntilNextDistribution < 60 * 60 && timeUntilNextDistribution > 60) {\r\n        return <h2>{`${Math.floor(timeUntilNextDistribution / (60))} minutes until distribution ends`}</h2>\r\n      } else {\r\n        return <h2>{`${Math.floor(timeUntilNextDistribution)} seconds until distribution ends`}</h2>\r\n      }\r\n      } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Function to distribute tokens\r\n  async function distribute() {\r\n    var amounts = distribution.addresses.map((usr) => usr.sendTo);\r\n    var addresses = distribution.addresses.map((usr) => usr.address);\r\n\r\n    addresses = addresses.filter((_, index) => amounts[index] !== 0);\r\n    amounts = amounts.filter((element) => element !== 0);\r\n\r\n    if (amounts.length + addresses.length > 0) {\r\n      await contract.distribute(addresses, amounts, projectName);\r\n    }\r\n  }\r\n\r\n  // Function to update payTo\r\n  function updatePayTo(index, change) {\r\n    const changeInBalance = distribution.addresses[index].sendTo - change;\r\n\r\n    if (distribution.myBalance + changeInBalance < 0 || change < 0) {\r\n      return null;\r\n    }\r\n\r\n    const newDistributionAddresses = [...distribution.addresses];\r\n    newDistributionAddresses[index] = { ...newDistributionAddresses[index], sendTo: change };\r\n\r\n    setDistribution({ ...distribution, myBalance: distribution.myBalance + changeInBalance, addresses: newDistributionAddresses });\r\n  }\r\n\r\n  // Initialize the page\r\n  useEffect(() => {\r\n    if (isConnected) {\r\n      getChangeProposals();\r\n      getMyChanges();\r\n      getDistributionState();\r\n    }\r\n  }, [checkWalletConnection, isConnected]);\r\n\r\n  // Function to format address\r\n  function getFormatAddress(address, startLength = 10, endLength = 4) {\r\n    if (!address) return '';\r\n\r\n    const start = address.substring(0, startLength);\r\n    const end = address.substring(address.length - endLength);\r\n\r\n    return `${start}...${end}`;\r\n  }\r\n\r\n  // Function to claim tokens\r\n  const claimTokens = async() => {\r\n    await contract.claimPendingTokens(projectName);\r\n    await getDistributionState();\r\n  }\r\n\r\n  // Function to start distribution\r\n  const startDistribution = async() => {\r\n    await contract.startDistribution(projectName);\r\n    await getDistributionState();\r\n  }\r\n\r\n    // returns the page's react component\r\n    return (\r\n        <div className='background'>\r\n        <ModalChanges isOpen={isModalOpen} closeModal={closeModal}>\r\n        <div className='modalFlex'>\r\n          <div className=''>\r\n            <h1>My Changes</h1>\r\n            <div className='modalFlex gap'>\r\n            {myChanges.map((myChange, index) => (\r\n              <div onClick={() => {clickedLocalChange !== myChange ? setClickedLocalChange(myChange) : setClickedLocalChange(false)}} className={`FileLine centerText ${clickedLocalChange === myChange ? \"brightBackground\" : null}`} key={index}>\r\n                <label className='CIDtext FileText'>{myChange}</label>\r\n              </div>\r\n            ))}\r\n            </div>\r\n          </div>\r\n\r\n          <div className='boxesDownload'>\r\n            <motion.div whileTap={{scale: 0.9}} whileHover={{scale: 1.03}} initial={{ opacity: 0, scale: 0.8 }} animate={{ opacity: 1, scale: 1 }} exit={{scale: .91 }} transition={{ type: \"spring\", duration: 0.6 }} onClick={() => {closeModal()}} className='projectHeader HomeButtonDiv'>\r\n            <img className=\"HomeButton\" src={LeftArrowSvg } alt=\"\" />\r\n            </motion.div>\r\n\r\n            <motion.div whileTap={{scale: 0.9}} whileHover={{scale: 1.03}} initial={{ opacity: 0, scale: 0.8 }} animate={{ opacity: 1, scale: 1 }} exit={{scale: .91 }} transition={{ type: \"spring\", duration: 0.6 }} onClick={() => {uploadChange()}} className='projectHeader HomeButtonDiv'>\r\n            <h1>Upload</h1>\r\n            </motion.div>\r\n\r\n            <motion.div whileTap={{scale: 0.9}} whileHover={{scale: 1.03}} initial={{ opacity: 0, scale: 0.8 }} animate={{ opacity: 1, scale: 1 }} exit={{scale: .91 }} transition={{ type: \"spring\", duration: 0.6 }} onClick={() => {deleteChange()}} className='projectHeader HomeButtonDiv'>\r\n            <h1>Delete</h1>\r\n            </motion.div>\r\n\r\n            <motion.div whileTap={{scale: 0.9}} whileHover={{scale: 1.03}} initial={{ opacity: 0, scale: 0.8 }} animate={{ opacity: 1, scale: 1 }} exit={{scale: .91 }} transition={{ type: \"spring\", duration: 0.6 }} onClick={() => {saveChanges()}} className='projectHeader HomeButtonDiv'>\r\n            <h1>Save Changes</h1>\r\n            </motion.div>\r\n\r\n          </div>\r\n        </div>\r\n        </ModalChanges>\r\n        \r\n        <div className='DistributionAndDev'>\r\n          <div className='onSide'>\r\n          <div className='lineShort'>\r\n            <div className='projectHeaderLineProposals'>\r\n                <motion.div whileTap={{y: 6}} whileHover={{y: 3}} initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{scale: .91 }} transition={{ type: \"spring\", duration: 0.6 }} onClick={() => {navigate('/')}} className='projectHeader HomeButtonDiv'>\r\n                    <img className=\"HomeButton\" src={HomeSvg} alt=\"\" />\r\n                </motion.div>\r\n\r\n                <motion.div whileTap={{y: 6}} whileHover={{y: 3}} initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{scale: .91 }} transition={{ type: \"spring\", duration: 0.6 }} onClick={() => {navigate(`/project/${projectName}`)}} className='projectHeader HomeButtonDiv'>\r\n                    <img className=\"HomeButton\" src={LeftArrowSvg} alt=\"\" />\r\n                </motion.div>\r\n\r\n                <motion.div whileTap={{y: 6}} whileHover={{y: 3}} initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{scale: .91 }} transition={{ type: \"spring\", duration: 0.6 }} className='projectHeader toTheEnd changesButton'>\r\n                    <h1>Update</h1>\r\n                </motion.div>\r\n\r\n                <motion.div onClick={() => {openModal()}} whileTap={{y: 6}} whileHover={{y: 3}} initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{scale: .91 }} transition={{ type: \"spring\", duration: 0.6 }} className='projectHeader toTheEnd changesButton'>\r\n                    <h1>My changes</h1>\r\n                </motion.div>\r\n            </div>\r\n\r\n            <div className={ChangeProposals.length > 0 ? \"projectListProposals\" : \"projectListProposals ListOfPatchesNo\"}> \r\n            {ChangeProposals.length > 0 ? ChangeProposals.map((item, index) => (\r\n                (item !== clickedChangeProposal ?\r\n                <div onClick={() => {setClickedChangeProposal(item)}} className='FileLine gapLine'>\r\n                <span className='FileText'>{getFormatAddress(item)}</span>\r\n                <span className='FileText'>|</span>\r\n                <span className='FileText'>Change Proposal</span>\r\n                </div> : \r\n                <div onClick={() => {setClickedChangeProposal(false)}} className='clickChangeProposal'>\r\n                  <span onClick={(e) => {e.stopPropagation(); voteForChange()}} className='FileText buttonFileLine'>Vote</span>\r\n                  <span onClick={(e) => {e.stopPropagation(); navigate(`/project/${projectName}/changeProposal/${item}`)}} className='FileText buttonFileLine'>Watch the change proposal</span>\r\n                </div>\r\n                ))) : <h1 className='ListOfPatchesNoText'>[ Change Proposals ]</h1>}\r\n            </div>\r\n          </div>\r\n          \r\n          <div className='lineShorter'>\r\n\r\n            <div className='distributionData'>\r\n                {timeForDistribution()}\r\n                <h3>Distribution Balance: {distribution.myBalance}</h3>\r\n                <h3>{distribution.myPendingTokens} Unclaimed Tokens</h3>\r\n            </div>\r\n\r\n            <div className='distribution'> \r\n              {distribution.lastDistributionTime > getTimeInSeconds() ? (\r\n              <>\r\n              <div className=''>\r\n              <div className='payTokens'>\r\n                  {distribution.addresses.map((item, index) => (\r\n                  <div key={index} className='payTokensDiv'>\r\n                    <div className='payTokensDetails'>\r\n                    <MetaMaskAvatar className='' address={item.address} size={40} />\r\n                    <div className='justDetails'>\r\n                    <span className=''>{getFormatAddress(item.address, 5, 3)}</span>\r\n                    <span className=''>Changes: {item.changesOrProposalsCount}</span>\r\n                    </div>\r\n                    </div>\r\n\r\n\r\n                    <div class=\"payTokensIncrementor\">\r\n                      <h3 className='incDec' onClick={() => {updatePayTo(index, distribution.addresses[index].sendTo - 1)}}>-</h3>\r\n                      <input onChange={(e) => updatePayTo(index, e.target.value)} type=\"number\" value={item.sendTo}/>\r\n                      <h3 className='incDec' onClick={() => {updatePayTo(index, distribution.addresses[index].sendTo + 1)}}>+</h3>\r\n                    </div>\r\n\r\n                  </div>\r\n                  ))}\r\n              </div>\r\n              </div>\r\n              <h2 onClick={() => {distribute()}} className='distributeButton'>Distribute</h2>\r\n              </>\r\n              ) : (\r\n              <>\r\n              <div className='center'>\r\n                <h1 onClick={() => {claimTokens()}} className='StartDistributeButtonOrClaim'>Claim Tokens</h1>\r\n                <h1 onClick={() => {startDistribution()}} className='StartDistributeButtonOrClaim'>Start Distribution</h1>\r\n              </div>\r\n              </>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProjectDevelopment;\r\n","C:\\Users\\User\\Desktop\\תכנות\\davidson\\project\\DavidsonProject\\WebApp\\steps\\src\\components\\ModalDetails.js",[],[],"C:\\Users\\User\\Desktop\\תכנות\\davidson\\project\\DavidsonProject\\WebApp\\steps\\src\\components\\ModalChanges.js",[],[],"C:\\Users\\User\\Desktop\\תכנות\\davidson\\project\\DavidsonProject\\WebApp\\steps\\src\\pages\\PageLearn.js",["79"],[],"import { useEffect } from \"react\";\r\nimport { animate, useScroll, motion } from \"framer-motion\";\r\n\r\nconst PageLearn = ({scroll}) => {\r\n  const animControls = scroll;\r\n\r\n  useScroll().scrollYProgress.on(\"change\", (yProgress) => {\r\n    if (!animControls.current) return;\r\n    animControls.current.time = yProgress * animControls.current.duration;\r\n    \r\n    console.log(animControls.current.time, yProgress, animControls.current.duration)\r\n  });\r\n\r\n  useEffect(() => {\r\n    animControls.current = animate([\r\n      [\".titleLearn\", { opacity: 0, y: -100 }, { ease: \"easeOut\", duration: 3 }],\r\n      [\".titleLearn\", { y: 0, opacity: 1 }, { ease: \"easeOut\", duration: 3, at: 1 }],\r\n      [\".explainBox\", { opacity: 1, x: 0 }, { ease: \"easeOut\", duration: 3, at: 1 }],\r\n      [\".explainBox\", { opacity: 0, x: 100}, { ease: \"easeOut\", duration: 3, at: 0 }],\r\n      [\".explainBox1\", { opacity: 1, x: 0 }, { ease: \"easeOut\", duration: 3, at: 1 }],\r\n      [\".explainBox1\", { opacity: 0, x: -100}, { ease: \"easeOut\", duration: 3, at: 0 }],\r\n      [\".explainBox2\", { opacity: 1, y: 0 }, { ease: \"easeOut\", duration: 3, at: 1 }],\r\n      [\".explainBox2\", { opacity: 0, y: 100}, { ease: \"easeOut\", duration: 3, at: 0 }],\r\n      \r\n    ]);\r\n    animControls.current.pause();\r\n  }, []);\r\n\r\n\r\n  return (\r\n    <div className=''>\r\n      <motion.h1         \r\n      initial={{opacity: 0, y: -100}}\r\n      className=\"titleLearn\"\r\n      >How it works</motion.h1>\r\n\r\n      <div className=\"gridExplains\">\r\n\r\n      <motion.div initial={{opacity: 0}} className=\"explainBox1\">\r\n        <span>1. Initiate A New Project</span>\r\n      </motion.div>\r\n\r\n      <motion.div initial={{opacity: 0}} className=\"explainBox2\">\r\n        <span>2. Share To Others</span>\r\n      </motion.div>\r\n\r\n      <motion.div initial={{opacity: 0}} className=\"explainBox\">\r\n        <span>3. Upload A Change Proposal</span>\r\n      </motion.div>\r\n\r\n      <motion.div initial={{opacity: 0}} className=\"explainBox1\">\r\n        <span>4. Vote For Change Proposals</span>\r\n      </motion.div>\r\n\r\n      <motion.div initial={{opacity: 0}} className=\"explainBox2\">\r\n        <span>1. Initiate A New Project</span>\r\n      </motion.div>\r\n\r\n      <motion.div initial={{opacity: 0}} className=\"explainBox\">\r\n        <span>1. Initiate A New Project</span>\r\n      </motion.div>\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PageLearn;\r\n","C:\\Users\\User\\Desktop\\תכנות\\davidson\\project\\DavidsonProject\\WebApp\\steps\\src\\pages\\newHome.js",[],[],"C:\\Users\\User\\Desktop\\תכנות\\davidson\\project\\DavidsonProject\\WebApp\\steps\\src\\pages\\NewHome.js",["80","81"],[],"import React, {useEffect, useState} from 'react';\r\nimport BentoGrid from \"@bentogrid/core\";\r\nimport downArrow from '../assets/down-arrow-svgrepo-com.svg';\r\nimport newProject from '../assets/create-folder-svgrepo-com.svg';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useWallet } from '../utils/WalletContext';\r\nimport { MetaMaskAvatar } from 'react-metamask-avatar';\r\nimport { motion, AnimatePresence  } from 'framer-motion';\r\n\r\nconst NewHome = () => {\r\n    const [lastProjects, setLastProjects]  = useState({lastProjects: [], localProjects: []})\r\n    const navigate = useNavigate()\r\n    const { contract, account, checkWalletConnection } = useWallet();\r\n    const [hoverNewProject, setHoverNewProject] = useState(false);\r\n        \r\n    useEffect(() => {\r\n        const myBento = new BentoGrid({\r\n            target: '.bentogrid',\r\n            cellGap: 10,\r\n            balanceFillers: false,\r\n            columns: 4,\r\n        });\r\n        checkWalletConnection()\r\n        getLastProjects()\r\n      }, []);\r\n    \r\n    const getLastProjects = async () => {\r\n    let lastProjectsNow = await contract.getLastProjects();\r\n    lastProjectsNow = lastProjectsNow.filter(str => str !== \"\");\r\n    try {\r\n        const response = await fetch('http://127.0.0.1:8000/api/getLocalProjects', {\r\n        method: 'GET',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        }\r\n        });\r\n\r\n        const data = await response.json(); \r\n        setLastProjects({lastProjects: lastProjectsNow, localProjects: data.projects})\r\n    } catch (error) {\r\n        console.error('Error:', error);\r\n        setLastProjects({lastProjects: lastProjectsNow, localProjects: []})\r\n    }}\r\n\r\n    function getFormatAddress(address, startLength = 6, endLength = 4) {\r\n        if (!address) return '';\r\n      \r\n        const start = address.substring(0, startLength);\r\n        const end = address.substring(address.length - endLength);\r\n      \r\n        return `${start}...${end}`;\r\n      }\r\n    \r\n    return (\r\n        <div className='backgroundNew center'>\r\n            <div className='boxes'>\r\n                <div class=\"bentogrid\">\r\n                    <div onClick={() => navigate(\"/createNewProject\")} className='box boxCreateNewProject' data-bento=\"1x1\" onMouseLeave={() => setHoverNewProject(false)} onMouseEnter={() => setHoverNewProject(true)}>\r\n                        <AnimatePresence initial={false} mode='wait'>\r\n                        {!hoverNewProject ? \r\n                            <motion.div initial={{scale: 0.91}} animate={{scale: 1}} exit={{scale: .91 }} transition={{ type: \"spring\", duration: 0.1 }} key={\"divBoxNewProject\"} className='boxBox-newProject'>\r\n                                <motion.img key={\"divBoxNewProjectImg\"} src={newProject} alt=\"\" />\r\n                            </motion.div> \r\n                            : \r\n                            <motion.h1 initial={{scale: 0.91}} animate={{scale: 1}} exit={{scale: .91 }} transition={{ type: \"spring\", duration: 0.1 }} key={\"divBoxNewProjectH1\"} className='BoxboxTitle'>Create <br /> New Project</motion.h1>\r\n                        }\r\n                        </AnimatePresence>\r\n                    </div>\r\n                    <div className='box boxBox-search' data-bento=\"2x1\">\r\n                        <h1 className='boxTitle'>Search</h1>\r\n                        <input className='search' type=\"text\"/>\r\n                    </div>\r\n                    <div className='box' data-bento=\"2x1\">\r\n                        <div className='center'>\r\n                            <div className='BoxUserData'>\r\n                                <div className='centerSquare'><MetaMaskAvatar className='square' address={account} size={40} /></div>\r\n                                <h3 className='boxTitle'>{getFormatAddress(account)}</h3>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className='box' data-bento=\"1x2\">\r\n                        <div className='Boxbox-projects'>\r\n                            <h1 className='boxTitle'>Recent activity</h1>\r\n                            {lastProjects.localProjects.map((item, index) => (\r\n                            <div onClick={() => {navigate(`/project/${item}`)}} key={index} whileHover={{scale: 1.05}} initial={{ scale: 0 }} animate={{ scale: 1 }} transition={{ type: \"spring\", duration: 0.7 }} className='BoxProject-box-load'>\r\n                            <span className='project-box-header'>{item}</span>\r\n                            <span>----------- | -----------</span>\r\n                            </div>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                    <div className='box boxBox-arrow-down' data-bento=\"1x1\">\r\n                        <div className='boxBox-arrow-down'>\r\n                            <img src={downArrow} alt=\"\" />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NewHome;\r\n",{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","severity":1,"message":"85","line":73,"column":6,"nodeType":"86","endLine":73,"endColumn":42,"suggestions":"87"},{"ruleId":"88","severity":1,"message":"89","line":1,"column":26,"nodeType":"90","messageId":"91","endLine":1,"endColumn":35},{"ruleId":"84","severity":1,"message":"92","line":197,"column":6,"nodeType":"86","endLine":197,"endColumn":30,"suggestions":"93"},{"ruleId":"84","severity":1,"message":"94","line":221,"column":6,"nodeType":"86","endLine":221,"endColumn":42,"suggestions":"95"},{"ruleId":"84","severity":1,"message":"96","line":27,"column":6,"nodeType":"86","endLine":27,"endColumn":8,"suggestions":"97"},{"ruleId":"88","severity":1,"message":"98","line":17,"column":15,"nodeType":"90","messageId":"91","endLine":17,"endColumn":22},{"ruleId":"84","severity":1,"message":"99","line":25,"column":10,"nodeType":"86","endLine":25,"endColumn":12,"suggestions":"100"},"no-new-object",["101"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getLastProjects'. Either include it or remove the dependency array.","ArrayExpression",["102"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'getProjectDetails'. Either include it or remove the dependency array.",["103"],"React Hook useEffect has missing dependencies: 'getChangeProposals', 'getDistributionState', and 'getMyChanges'. Either include them or remove the dependency array.",["104"],"React Hook useEffect has a missing dependency: 'animControls'. Either include it or remove the dependency array.",["105"],"'myBento' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'checkWalletConnection' and 'getLastProjects'. Either include them or remove the dependency array.",["106"],"no-object-constructor",{"desc":"107","fix":"108"},{"desc":"109","fix":"110"},{"desc":"111","fix":"112"},{"desc":"113","fix":"114"},{"desc":"115","fix":"116"},"Update the dependencies array to be: [checkWalletConnection, getLastProjects, isConnected]",{"range":"117","text":"118"},"Update the dependencies array to be: [changeProposalOrGoBack, getProjectDetails]",{"range":"119","text":"120"},"Update the dependencies array to be: [checkWalletConnection, getChangeProposals, getDistributionState, getMyChanges, isConnected]",{"range":"121","text":"122"},"Update the dependencies array to be: [animControls]",{"range":"123","text":"124"},"Update the dependencies array to be: [checkWalletConnection, getLastProjects]",{"range":"125","text":"126"},[2512,2548],"[checkWalletConnection, getLastProjects, isConnected]",[6833,6857],"[changeProposalOrGoBack, getProjectDetails]",[7728,7764],"[checkWalletConnection, getChangeProposals, getDistributionState, getMyChanges, isConnected]",[1262,1264],"[animControls]",[1015,1017],"[checkWalletConnection, getLastProjects]"]