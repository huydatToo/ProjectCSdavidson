{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\\\u05EA\\u05DB\\u05E0\\u05D5\\u05EA\\\\davidson\\\\project\\\\DavidsonProject\\\\WebApp\\\\steps\\\\src\\\\utils\\\\WalletContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// WalletContext.js\nimport React, { createContext, useContext, useState, useMemo } from 'react';\nimport { ethers } from 'ethers';\nimport { CONTRACT_ADDRESS, CONTRACT_ABI } from '../utils/SmartContract';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WalletContext = /*#__PURE__*/createContext();\n\n// the webapp's context allow access to important user data like wallet address from anywhere in the webapp\nexport const WalletProvider = ({\n  children\n}) => {\n  _s();\n  const [isConnected, setIsConnected] = useState(false);\n  const [account, setAccount] = useState(null);\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  const signer = provider.getSigner();\n  const contract = useMemo(() => {\n    return new ethers.Contract(CONTRACT_ADDRESS, CONTRACT_ABI, signer);\n  }, [signer]);\n\n  // the functions returns wether a user is connected and if it do it save it's address and other data\n  const checkWalletConnection = async () => {\n    if (window.ethereum) {\n      try {\n        const accounts = await window.ethereum.request({\n          method: 'eth_accounts'\n        });\n        if (accounts.length > 0) {\n          setIsConnected(true);\n          console.log(accounts[0]);\n          setAccount(accounts[0]);\n        }\n      } catch (error) {\n        console.error(\"Error checking wallet connection:\", error);\n      }\n    }\n  };\n  const values = {\n    account,\n    contract,\n    isConnected,\n    checkWalletConnection,\n    setIsConnected,\n    setAccount\n  };\n  return /*#__PURE__*/_jsxDEV(WalletContext.Provider, {\n    value: values,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(WalletProvider, \"rMufZBrdpCBOd13Ki9M8cTYp2lw=\");\n_c = WalletProvider;\nexport const useWallet = () => {\n  _s2();\n  return useContext(WalletContext);\n};\n_s2(useWallet, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"WalletProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useMemo","ethers","CONTRACT_ADDRESS","CONTRACT_ABI","jsxDEV","_jsxDEV","WalletContext","WalletProvider","children","_s","isConnected","setIsConnected","account","setAccount","provider","providers","Web3Provider","window","ethereum","signer","getSigner","contract","Contract","checkWalletConnection","accounts","request","method","length","console","log","error","values","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useWallet","_s2","$RefreshReg$"],"sources":["C:/Users/User/Desktop/תכנות/davidson/project/DavidsonProject/WebApp/steps/src/utils/WalletContext.js"],"sourcesContent":["// WalletContext.js\r\nimport React, { createContext, useContext, useState, useMemo } from 'react';\r\nimport { ethers } from 'ethers'\r\nimport { CONTRACT_ADDRESS, CONTRACT_ABI } from '../utils/SmartContract';\r\nconst WalletContext = createContext();\r\n\r\n// the webapp's context allow access to important user data like wallet address from anywhere in the webapp\r\nexport const WalletProvider = ({ children }) => {\r\n    const [isConnected, setIsConnected] = useState(false);\r\n    const [account, setAccount] = useState(null);\r\n    const provider = new ethers.providers.Web3Provider(window.ethereum)\r\n    const signer = provider.getSigner()\r\n\r\n    const contract = useMemo(() => {\r\n      return new ethers.Contract(CONTRACT_ADDRESS, CONTRACT_ABI, signer)\r\n    }, [signer])\r\n  \r\n    // the functions returns wether a user is connected and if it do it save it's address and other data\r\n    const checkWalletConnection = async () => {\r\n        if (window.ethereum) {\r\n          try {\r\n            const accounts = await window.ethereum.request({ method: 'eth_accounts' });\r\n            if (accounts.length > 0) {\r\n              setIsConnected(true);\r\n              console.log(accounts[0])\r\n              setAccount(accounts[0]);\r\n            }\r\n          } catch (error) {\r\n            console.error(\"Error checking wallet connection:\", error);\r\n          }\r\n        }\r\n    };\r\n    \r\n\r\n  const values = {\r\n    account,\r\n    contract,\r\n    isConnected,\r\n    checkWalletConnection,\r\n    setIsConnected,\r\n    setAccount,\r\n    \r\n  };\r\n\r\n  return (\r\n    <WalletContext.Provider value={values}>\r\n      {children}\r\n    </WalletContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useWallet = () => {\r\n  return useContext(WalletContext);\r\n};\r\n"],"mappings":";;;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,OAAO,QAAQ,OAAO;AAC3E,SAASC,MAAM,QAAQ,QAAQ;AAC/B,SAASC,gBAAgB,EAAEC,YAAY,QAAQ,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACxE,MAAMC,aAAa,gBAAGT,aAAa,CAAC,CAAC;;AAErC;AACA,OAAO,MAAMU,cAAc,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAMe,QAAQ,GAAG,IAAIb,MAAM,CAACc,SAAS,CAACC,YAAY,CAACC,MAAM,CAACC,QAAQ,CAAC;EACnE,MAAMC,MAAM,GAAGL,QAAQ,CAACM,SAAS,CAAC,CAAC;EAEnC,MAAMC,QAAQ,GAAGrB,OAAO,CAAC,MAAM;IAC7B,OAAO,IAAIC,MAAM,CAACqB,QAAQ,CAACpB,gBAAgB,EAAEC,YAAY,EAAEgB,MAAM,CAAC;EACpE,CAAC,EAAE,CAACA,MAAM,CAAC,CAAC;;EAEZ;EACA,MAAMI,qBAAqB,GAAG,MAAAA,CAAA,KAAY;IACtC,IAAIN,MAAM,CAACC,QAAQ,EAAE;MACnB,IAAI;QACF,MAAMM,QAAQ,GAAG,MAAMP,MAAM,CAACC,QAAQ,CAACO,OAAO,CAAC;UAAEC,MAAM,EAAE;QAAe,CAAC,CAAC;QAC1E,IAAIF,QAAQ,CAACG,MAAM,GAAG,CAAC,EAAE;UACvBhB,cAAc,CAAC,IAAI,CAAC;UACpBiB,OAAO,CAACC,GAAG,CAACL,QAAQ,CAAC,CAAC,CAAC,CAAC;UACxBX,UAAU,CAACW,QAAQ,CAAC,CAAC,CAAC,CAAC;QACzB;MACF,CAAC,CAAC,OAAOM,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MAC3D;IACF;EACJ,CAAC;EAGH,MAAMC,MAAM,GAAG;IACbnB,OAAO;IACPS,QAAQ;IACRX,WAAW;IACXa,qBAAqB;IACrBZ,cAAc;IACdE;EAEF,CAAC;EAED,oBACER,OAAA,CAACC,aAAa,CAAC0B,QAAQ;IAACC,KAAK,EAAEF,MAAO;IAAAvB,QAAA,EACnCA;EAAQ;IAAA0B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACa,CAAC;AAE7B,CAAC;AAAC5B,EAAA,CA1CWF,cAAc;AAAA+B,EAAA,GAAd/B,cAAc;AA4C3B,OAAO,MAAMgC,SAAS,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC7B,OAAO1C,UAAU,CAACQ,aAAa,CAAC;AAClC,CAAC;AAACkC,GAAA,CAFWD,SAAS;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}