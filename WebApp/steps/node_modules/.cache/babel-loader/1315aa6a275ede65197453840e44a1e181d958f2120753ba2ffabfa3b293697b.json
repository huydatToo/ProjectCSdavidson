{"ast":null,"code":"import e from \"react\";\nimport a from \"@metamask/jazzicon\";\nimport r from \"@emotion/styled\";\nconst s = {},\n  t = e => {\n    const {\n      address: r,\n      size: t\n    } = e;\n    if (!r || 42 !== r.length) return \"\";\n    const i = `${t}-${r}`;\n    if (s[i]) return s[i];\n    const l = parseInt(r.slice(2, 10), 16),\n      n = a(t, l).firstChild;\n    if (!n) return;\n    const d = new XMLSerializer().serializeToString(n),\n      g = `data:image/svg+xml,${(o = d, o.replace(\"<svg\", ~o.indexOf(\"xmlns\") ? \"<svg\" : '<svg xmlns=\"http://www.w3.org/2000/svg\"').replace(/\"/g, \"'\").replace(/%/g, \"%25\").replace(/#/g, \"%23\").replace(/{/g, \"%7B\").replace(/}/g, \"%7D\").replace(/</g, \"%3C\").replace(/>/g, \"%3E\").replace(/\\s+/g, \" \"))}`;\n    var o;\n    return s[i] = g, g;\n  },\n  i = r(\"div\", {\n    shouldForwardProp: e => \"size\" !== e\n  })`\n  border-radius: 50%;\n  padding: 0;\n  margin: 0;\n  display: inline-block;\n  background: rgb(242, 98, 2);\n  overflow: hidden;\n  width: ${({\n    size: e\n  }) => e}px;\n  height: ${({\n    size: e\n  }) => e}px;\n`,\n  l = ({\n    size: a = 24,\n    address: r,\n    className: s\n  }) => r && 42 === r.length ? e.createElement(i, {\n    className: s,\n    \"data-testid\": \"MetaMaskAvatar-AvatarWrapper\",\n    size: a\n  }, e.createElement(\"img\", {\n    alt: \"avatar\",\n    \"data-testid\": `MetaMaskAvatar-Image-${a}x${a}`,\n    src: t({\n      address: r,\n      size: a\n    })\n  })) : null;\nexport { l as MetaMaskAvatar };","map":{"version":3,"names":["s","t","e","address","r","size","length","i","l","parseInt","slice","n","a","firstChild","d","XMLSerializer","serializeToString","g","o","replace","indexOf","shouldForwardProp","MetaMaskAvatar","className","createElement","alt","src"],"sources":["C:\\Users\\User\\Desktop\\תכנות\\davidson\\project\\DavidsonProject\\WebApp\\steps\\node_modules\\react-metamask-avatar\\src\\getMetamaskAvatar\\index.ts","C:\\Users\\User\\Desktop\\תכנות\\davidson\\project\\DavidsonProject\\WebApp\\steps\\node_modules\\react-metamask-avatar\\src\\encodeSvg\\index.ts","C:\\Users\\User\\Desktop\\תכנות\\davidson\\project\\DavidsonProject\\WebApp\\steps\\node_modules\\react-metamask-avatar\\src\\MetaMaskAvatar\\MetaMaskAvatar.styled.tsx","C:\\Users\\User\\Desktop\\תכנות\\davidson\\project\\DavidsonProject\\WebApp\\steps\\node_modules\\react-metamask-avatar\\src\\MetaMaskAvatar\\index.tsx"],"sourcesContent":["import jazzicon from '@metamask/jazzicon';\n\nimport { encodeSvg } from '../encodeSvg';\n\ntype ResolveAvatarParam = {\n  address?: string | null;\n  size: number;\n};\nconst CACHE: Record<string, string> = {};\n\n/*\n * A function that takes in an address and a size and returns a string.\n * It's generating a unique metamask avatar for a given address using the algorithm taken from metamask repo.\n */\nexport const getMetamaskAvatar = (payload: ResolveAvatarParam) => {\n  const { address, size } = payload;\n  if (!address || address.length !== 42) {\n    return '';\n  }\n  const cacheId = `${size}-${address}`;\n  if (CACHE[cacheId]) {\n    return CACHE[cacheId];\n  }\n  // https://github.com/MetaMask/metamask-filecoin-developer-beta/blob/4ec4bf9995e64bfb0eb732cbe10ae2f2bac2ddff/ui/lib/icon-factory.js#L65\n  const seed = parseInt(address.slice(2, 10), 16);\n  const divWithSvg = jazzicon(size, seed);\n\n  const svg = divWithSvg.firstChild;\n  if (!svg) {\n    return;\n  }\n  const xmlSerializer = new XMLSerializer();\n  const str = xmlSerializer.serializeToString(svg);\n  const dataUrl = `data:image/svg+xml,${encodeSvg(str)}`;\n  CACHE[cacheId] = dataUrl;\n  return dataUrl;\n};\n","/* Encoding the SVG string so that it can be used in a URL. */\n/**\n * It takes a string of SVG markup and returns a string of HTML markup\n * @param {string} svgString - The SVG string to encode.\n */\nexport function encodeSvg(svgString: string): string {\n  return svgString\n    .replace(\n      '<svg',\n      ~svgString.indexOf('xmlns') ? '<svg' : '<svg xmlns=\"http://www.w3.org/2000/svg\"',\n    )\n    .replace(/\"/g, \"'\")\n    .replace(/%/g, '%25')\n    .replace(/#/g, '%23')\n    .replace(/{/g, '%7B')\n    .replace(/}/g, '%7D')\n    .replace(/</g, '%3C')\n    .replace(/>/g, '%3E')\n    .replace(/\\s+/g, ' ');\n}\n","import styled from '@emotion/styled';\n\nexport const AvatarWrapper = styled('div', {\n  shouldForwardProp: (prop) => prop !== 'size',\n})<{\n  size: number;\n}>`\n  border-radius: 50%;\n  padding: 0;\n  margin: 0;\n  display: inline-block;\n  background: rgb(242, 98, 2);\n  overflow: hidden;\n  width: ${({ size }) => size}px;\n  height: ${({ size }) => size}px;\n`;\n","import React from 'react';\n\nimport { getMetamaskAvatar } from '../getMetamaskAvatar';\nimport { AvatarWrapper } from './MetaMaskAvatar.styled';\n\n/**\n */\n/**\n * `MetaMaskAvatarProps` has a required `address` property of type `string` and an optional `size` property\n * of type `number`.\n * @property {string} address - The address of the account to get the avatar for. Expecting a string of length 42 that represents Ethereum address\n * @property {number} size - The size of the avatar in pixels.\n * @property {string} className - A string that will be added to the className of the wrapper component. Allows custom styling using: https://emotion.sh/docs/styled#styling-any-component\n */\nexport type MetaMaskAvatarProps = {\n  address: string;\n  size?: number;\n  className?: string;\n};\n\nexport const MetaMaskAvatar: React.FunctionComponent<MetaMaskAvatarProps> = ({\n  size = 24,\n  address,\n  className,\n}) => {\n  if (!address || address.length !== 42) {\n    return null;\n  }\n\n  return (\n    <AvatarWrapper className={className} data-testid=\"MetaMaskAvatar-AvatarWrapper\" size={size}>\n      <img\n        alt=\"avatar\"\n        data-testid={`MetaMaskAvatar-Image-${size}x${size}`}\n        src={getMetamaskAvatar({\n          address,\n          size,\n        })}\n      />\n    </AvatarWrapper>\n  );\n};\n"],"mappings":";;;AAQA,MAAMA,CAAA,GAAgC;EAMzBC,CAAA,GAAqBC,CAAA;IAChC;MAAMC,OAAA,EAAEC,CAAA;MAAOC,IAAA,EAAEJ;IAAA,IAASC,CAAA;IAC1B,KAAKE,CAAA,IAA8B,OAAnBA,CAAA,CAAQE,MAAA,EACtB,OAAO;IAET,MAAMC,CAAA,GAAU,GAAGN,CAAA,IAAQG,CAAA;IAC3B,IAAIJ,CAAA,CAAMO,CAAA,GACR,OAAOP,CAAA,CAAMO,CAAA;IAGf,MAAMC,CAAA,GAAOC,QAAA,CAASL,CAAA,CAAQM,KAAA,CAAM,GAAG,KAAK;MAGtCC,CAAA,GAFaC,CAAA,CAASX,CAAA,EAAMO,CAAA,EAEXK,UAAA;IACvB,KAAKF,CAAA,EACH;IAEF,MACMG,CAAA,GADgB,IAAIC,aAAA,GACAC,iBAAA,CAAkBL,CAAA;MACtCM,CAAA,GAAU,uBC5BQC,CAAA,GD4BwBJ,CAAA,EC3BzCI,CAAA,CACJC,OAAA,CACC,SACCD,CAAA,CAAUE,OAAA,CAAQ,WAAW,SAAS,2CAExCD,OAAA,CAAQ,MAAM,KACdA,OAAA,CAAQ,MAAM,OACdA,OAAA,CAAQ,MAAM,OACdA,OAAA,CAAQ,MAAM,OACdA,OAAA,CAAQ,MAAM,OACdA,OAAA,CAAQ,MAAM,OACdA,OAAA,CAAQ,MAAM,OACdA,OAAA,CAAQ,QAAQ;IAbf,IAAoBD,CAAA;ID8BxB,OADAlB,CAAA,CAAMO,CAAA,IAAWU,CAAA,EACVA,CAAO;EAAA;EEjCHV,CAAA,GAAgBH,CAAA,CAAO,OAAO;IACzCiB,iBAAA,EAAoBnB,CAAA,IAAkB,WAATA;EAAA,EAG7B;;;;;;;WAOS;IAAGG,IAAA,EAAAH;EAAA,MAAWA,CAAA;YACb;IAAGG,IAAA,EAAAH;EAAA,MAAWA,CAAA;;ECMbM,CAAA,GAA+Dc,CAAA;IAC1EjB,IAAA,EAAAO,CAAA,GAAO;IACPT,OAAA,EAAAC,CAAA;IACAmB,SAAA,EAAAvB;EAAA,MAEKI,CAAA,IAA8B,OAAnBA,CAAA,CAAQE,MAAA,GAKtBJ,CAAA,CAAAsB,aAAA,CAACjB,CAAA,EAAa;IAACgB,SAAA,EAAWvB,CAAA;IAAS,eAAc;IAA+BK,IAAA,EAAMO;EAAA,GACpFV,CAAA,CAAAsB,aAAA;IACEC,GAAA,EAAI;IAAQ,eACC,wBAAwBb,CAAA,IAAQA,CAAA;IAC7Cc,GAAA,EAAKzB,CAAA,CAAkB;MACrBE,OAAA,EAAAC,CAAA;MACAC,IAAA,EAAAO;IAAA;EAAA,MAVC;AAAA,SAAAJ,CAAA,IAAAc,cAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}